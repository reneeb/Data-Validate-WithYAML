[![Build Status](https://travis-ci.org/reneeb/Data-Validate-WithYAML.svg?branch=master)](https://travis-ci.org/reneeb/Data-Validate-WithYAML)
[![Kwalitee status](http://cpants.cpanauthors.org/dist/Data-Validate-WithYAML.png)](http://cpants.charsbar.org/dist/overview/Data-Validate-WithYAML)
[![GitHub issues](https://img.shields.io/github/issues/reneeb/Data-Validate-WithYAML.svg)](https://github.com/reneeb/Data-Validate-WithYAML/issues)

# NAME

Data::Validate::WithYAML - Validation framework that can be configured with YAML files

# VERSION

version 0.18

# SYNOPSIS

Perhaps a little code snippet.

    use Data::Validate::WithYAML;

    my $foo = Data::Validate::WithYAML->new( 'test.yml' );
    my %map = (
        name     => 'Test Person',
        password => 'xasdfjakslr453$',
        plz      => 64569,
        word     => 'Herr',
        age      => 55,
    );
    
    for my $field ( keys %map ){
        print "ok: ",$map{$field},"\n" if $foo->check( $field, $map{$field} );
    }

data.yml

    ---
    step1:
        name:
            type: required
            length: 8,122
        password:
            type: required
            length: 10,
        plz:
            regex: ^\d{4,5}$
            type: optional
        word:
            enum:
                - Herr
                - Frau
                - Firma
        age:
            type: required
            min: 18
            max: 65

# METHODS

## new

    my $foo = Data::Validate::WithYAML->new( 'filename' );
    my $foo = Data::Validate::WithYAML->new(
        'filename',
        allow_subs => 1,
        no_steps   => 1,
    );

creates a new object.

## set\_optional

This method makes a field optional if it was required

## set\_required

This method makes a field required if it was optional

## validate

This subroutine validates one form. You have to pass the form name (key in the
config file), a hash with fieldnames and its values

    my %fields = (
        username => $cgi->param('user'),
        passwort => $password,
    );
    $foo->validate( 'step1', %fields );

## fieldnames

## errstr

## message

returns the message if specified in YAML

    $obj->message( 'fieldname' );

## check\_list

    $obj->check_list('fieldname',['value','value2']);

Checks if the values match the validation criteria. Returns an arrayref with
checkresults:

    [
        1,
        0,
    ] 

## check

    $obj->check('fieldname','value');

checks if a value is valid. returns 1 if the value is valid, otherwise it
returns 0.

## fieldinfo

Returns the config for the given field.

Your test.yml:

    ---
    age:
      type: required
      min: 18
      max: 65

Your script:

    my $info = $validator->fieldinfo( 'age' );

`$info` is a hashreference then:

    {
        type => 'required',
        min  => 18,
        max  => 65,
    }

# FIELDCONFIG

These config options can be used to configure a field:

- type

    mandatory. It defines if a value is _required_ or _optional_

- regex

    A value for this field is valid if the value matches this regular expression

- min

    For numeric fields. A valid value must be greater than the value given for _min_

- max

    Also for numeric fields. A valid value must be lower than the value given for _max_

- enum

    A list of valid values.

- sub

    e.g.

        sub: { $_ eq 'test' }

    A codeblock that is `eval`ed. You can only use this option when you set _allow\_subs_ in
    constructor call.

- length

    A value for the field must be of length within this range

        length: 1,

    longer than 1 char.

        length: 3,5

    length must be between 3 and 5 chars

        length: ,5

    Value must be at longest 5 chars.

        length: 3

    Length must be exactly 3 chars

- depends\_on

    Change the config for a field depending on an other field. This only works when `validate` is called.

- case

    List of values the field it depends on can have. In case the field it depends on has a value listed in
    _case_, the default config for the file is changed.

        password:
           type: required
           length: 1,
           depends_on: group
           case:
               admin:
                   length: 10,
               agent:
                   length: 5,

    If the value for _group_ is "admin", the given password must be longer than 10 chars, for agents the
    password must be longer than 5 chars and for every other group the password must be longer than 1 char.

- depends\_lax

    Without this setting, a value for the field this field depends on must be given.

- datatype

    For a few types of values there are predefined checks.

    - num
    - int
    - positive\_int

- plugin

    Use a plugin (e.g. `Data::Validate::WithYAML::Plugin::EMail`) to check the value.

        plugin: EMail



# Development

The distribution is contained in a Git repository, so simply clone the
repository

```
$ git clone http://github.com/reneeb/Data-Validate-WithYAML.git
```

and change into the newly-created directory.

```
$ cd Data-Validate-WithYAML
```

The project uses [`Dist::Zilla`](https://metacpan.org/pod/Dist::Zilla) to
build the distribution, hence this will need to be installed before
continuing:

```
$ cpanm Dist::Zilla
```

To install the required prequisite packages, run the following set of
commands:

```
$ dzil authordeps --missing | cpanm
$ dzil listdeps --author --missing | cpanm
```

The distribution can be tested like so:

```
$ dzil test
```

To run the full set of tests (including author and release-process tests),
add the `--author` and `--release` options:

```
$ dzil test --author --release
```

# AUTHOR

Renee Baecker <reneeb@cpan.org>

# COPYRIGHT AND LICENSE

This software is Copyright (c) 2014 by Renee Baecker.

This is free software, licensed under:

    The Artistic License 2.0 (GPL Compatible)
